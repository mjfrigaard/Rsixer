---
title: "R6 & OOP"
format: 
  html:
    toc: true
    toc-depth: 4
    toc-title: 'Contents'
    toc-expand: true
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
vignette: >
  %\VignetteIndexEntry{R6 & OOP}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: pkgs
library(Rsixer)
library(sloop)
library(R6)
```

This vignette demonstrates how basic R6 classes work. We'll start with a simple
`Person` class that prints a greeting when created.

```{r}
Person <- R6::R6Class("Person",
  public = list(
    name = NULL,
    hair = NULL,
    initialize = function(name = NA, hair = NA) {
      self$name <- name
      self$hair <- hair
      self$greet()
    },
    set_hair = function(val) {
      self$hair <- val
    },
    greet = function() {
      cat(paste0("Hello, my name is ", self$name, ".\n"))
    }
  )
)
ann <- Person$new("Ann", "black")
sloop::otype(ann)
```

The `Person` class stores some basic fields and uses `greet()` to print a
message. When we inspect `ann` we can see it's an R6 object:

```{r}
ann
```

Next we'll create a `Counter` class that can increment and reset an internal
value.

```{r}
#| label: Counter
Counter <- R6::R6Class(
  "Counter",
  public = list(
    value = 0,
    initialize = function(start = 0) {
      self$value <- start
    },
    increment = function() {
      self$value <- self$value + 1
    },
    reset = function() {
      self$value <- 0
    },
    get = function() {
      self$value
    }
  )
)
```

This simple counter allows us to track a numeric state across function calls.

